#include<iostream>
#include<string>

using namespace std;

//虚析构和纯虚析构
class Animal
{
public:
	Animal()
	{
		cout << "Animal构造函数的调用" << endl;
	}
	//利用虚析构可以解决父类指针调用时不释放子类堆区开辟的空间等问题
//virtual~Animal()
//	{
//		cout << "Animal析构函数的调用" << endl;
//	}

    //纯虚析构
	//有了纯虚析构之后，这个类也属于抽象类无法实例化对象
	virtual ~Animal() = 0;

	//纯虚函数
	virtual void speak() = 0;
};
Animal::~Animal()//纯虚析构需要声明也需要实现
{
	cout << "Animal纯虚析构函数调用" << endl;
}
class Cat :public Animal
{
public:

	Cat(string name)
	{
		cout << "Cat构造函数的调用" << endl;
		m_Name = new string(name);
	}
	virtual void speak()
	{
		cout << *m_Name<<"小猫在说话" << endl;
	}
	

	~Cat()
	{
		if (m_Name != NULL)
		{
			cout << "Car析构函数的调用" << endl;
			delete m_Name;
		}
	}
	string* m_Name;
};
void test01()
{
	Animal* animal = new Cat("Tom");
	animal->speak();
	//父类指针在析构时候不会调用子类中的析构函数，导致子类如果有堆区开辟的属性出现内存泄露的问题
	delete animal;
}
int main()
{
	test01();
	system("pause");
return 0;
}
