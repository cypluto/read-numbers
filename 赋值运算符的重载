#define _CRT_SECURE_NO_DEPRECATE
#include<iostream>
using namespace std;

//赋值运算符重载

class Person
{
	friend void test01();
public:

	Person(int age)
	{
		m_Age = new int(age);
	}

	~Person()
	{
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;
		}
	}
	//重载赋值运算符
	Person& operator=(Person& p)//返回类类型的变量是为了可以允许连续赋值的操作
	{
		//判断是否有属性在堆区上，如果有先释放干净，然后再进行深拷贝
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;
		}

		//深拷贝
		m_Age = new int(*p.m_Age);

		//返回对象本身
		return* this;
	}
private:
	int* m_Age;
};
void test01()
{
	Person p1(18);

	Person p2(20);

	Person p3(30);

	cout << "p1的年龄为：" << *p1.m_Age << endl;
	cout << "p2的年龄为：" << *p2.m_Age << endl;
	cout << "p3的年龄为：" << *p3.m_Age << endl;
}
int main()
{
	test01();
	return 0;
}
