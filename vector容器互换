#include<iostream>
#include<vector>

using namespace std;

//vector容器互换

void printVector(vector<int>& v)
{
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << ' ';
	}
	cout << endl;
}

//1、基本使用
void test01()
{
	vector<int>v1;
	for (int i = 0; i < 10; i++)
	{
		v1.push_back(i);
	}

	printVector(v1);

	vector<int>v2;
	for (int i = 10; i > 0; i--)
	{
		v2.push_back(i);
	}
	printVector(v2);

	//互换
	v1.swap(v2);

	printVector(v1);
	printVector(v2);
}

//2、实际用途
//巧用swap可以收缩内存空间
void test02()
{
	vector<int>v;
	for (int i = 0; i < 100000; i++)
	{
		v.push_back(i);
	}
	cout << "v的容量为：" << v.capacity() << endl;
	cout << "v的大小为：" << v.size() << endl;

	v.resize(3);//重新指定大小
	//重新定义大小过后容量不会改变会造成内存浪费
	cout << "v的容量为：" << v.capacity() << endl;
	cout << "v的大小为：" << v.size() << endl;

	//巧用swap收缩内存
	vector<int>(v).swap(v);
	/*
	 vector<int>(v);//创建一个匿名对象，调用拷贝构造函数对该对象初始化即用v中可用大小初始化该匿名对象
	 vector<int>(v).swap(v);//将匿名对象与v交换，v容量大小都为3
	 而匿名对象在使用之后立即被系统释放，内存被回收
	*/
	cout << "v的容量为：" << v.capacity() << endl;
	cout << "v的大小为：" << v.size() << endl;
}
int main()
{
	test01();
	test02();
	system("pause");
	return 0;
}
