#include<iostream>

using namespace std;
 
class Animal
{
public:
	int m_Age;
};
//利用虚继承解决菱形继承的问题
//继承之前加上关键字virtual变为虚继承
//虚继承继承的不是父类的数据而是父类数据的指针使更改数据等行为指向同一个地址 ，不存在同名类型的重赋值
//Animal类称为虚基类
class Sheep:virtual public Animal{};

class Tuo :virtual public Animal {};

class SheepTuo :public Sheep, public Tuo {};

void test01()
{
	SheepTuo st;

	st.Sheep::m_Age = 18;
	st.Tuo::m_Age = 28;
	cout << "st.Sheep::m_Age= " << st. Sheep::m_Age << endl;
	cout << "st.Tuo::m_Age= " << st.Tuo::m_Age << endl;
	cout << "st.m_Age=" << st.m_Age << endl;
	//这份数据我们知道只要有一份就可以，棱形继承导致数据有两份，资源浪费
}
int main()
{
	test01();
	system("pause");
	return 0;
}
